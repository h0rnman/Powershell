<#
    This module provides functions for sharing credentials across multiple computers.  This program is provided as-is with no
    warranty.  Use at your own risk.
#>

#Requires -Version 4

function New-AESKey{
<#
    .Synopsis
    Creates a new AES encryption key.

    .Description
    Creates a new Byte[] representing a randomly generated AES key.

    .Parameter Length
    The length of the key to be generated.  Acceptable values are 128, 192, and 256.

    .Parameter Path
    Location to store the key.bin file.

    .Outputs
    A Byte[] of the specified length that can be used as an AES key.

    .Example
    
    $KeyFile = New-AESKey -Length 128 -Path "C:\temp\"

    Creates a new 128-bit AES key file, stores the key in $KeyFile, and saves the key as c:\temp\key.bin.

#>
[CmdletBinding()]

Param (
    [parameter(Mandatory=$true, Position=1)]
    [ValidateSet(128,192,256)]
    [int]$Length,
    [parameter(Mandatory=$false, Position=2)]
    [string]$Path
)

    $key = New-Object Byte[]( ($Length/8) )
    $rng = [Security.Cryptography.RNGCryptoServiceProvider]::Create()
    $rng.GetBytes($key)

    if ($Path) {
        [System.IO.File]::WriteAllBytes($path, $key)
    }

    return $key

}


function New-SharedCredentials {
<#
    .Synopsis
    Creates the files necessary to support securely sharing credentials across multiple machines.

    .Description
    New-SharedCredentials creates three files in the locations specified.  They key.bin file is the AES key used to encrypt
    the username.enc and password.enc files and should be kept in a shared location with access restricted by ACLs.  Since the
    username.enc and password.enc files are encrpyted, they can be kept with the script file.  The default behavior is to store
    all three files in the location specified by the Path parameter.

    .Parameter Path
    Specifies the location to store (by default) all three files used for sharing credentials.

    .Parameter KeyPath
    Specifies an alternate location for the key.bin file.

    .Parameter KeyFile
    Specified the name of the AES key file.  Default is key.bin.

    .Parameter CredentialsFile
    Specifies the name of the file that stores the encrypted credentials.  Default is credentials.dat.

    .Parameter KeyLength
    Specifies the length of the AES key used to encrypt the username and password files.  Allowed values are 128, 192, and 256.

    .Parameter UseGUI
    Forces usage of the GUI credentials window.  The default is to prompt on the command line.

    .Outputs
    Two files that are used by Get-SharedCredentials.
	  credentials.dat:	File containing the supplied credentials, encrypted with the key.bin AES key.
      key.bin:			The AES key used to encrypt the credentials.dat file.

    .Example
    New-SharedCredentials "\\server01\Credentials\Script1"

    Creates the shared credential files with 256-bit AES encryption and stores them both in the \\server01\Credentials\Script1 folder.

    .Example
    
    New-SharedCredentials "\\server01\Credentials\Script1" -KeyPath "\\server01\Keys\Script1" -KeyLength 192

    Creates the shared credential file with 192-bit AES encryption.  Stores the credentials.dat file in \\server01\Credentials\Script1 and
    stores the key.bin file in \\server01\Keys\Script1 folder.


    .LINK
    
    https://github.com/h0rnman/PSSharedCredentials

#>
[CmdletBinding()]

Param(
    [parameter(Mandatory=$true,Position=1)]
    [string]$Path,
    [parameter(Mandatory=$false)]
    [string]$KeyPath,
    [parameter(Mandatory=$false)]
    [string]$CredentialsFile = "credentials.dat",
    [parameter(Mandatory=$false)]
    [string]$KeyFile = "key.bin",
    [parameter(Mandatory=$false)]
    [ValidateSet(128,192,256)]
    [int]$KeyLength = 256,
    [parameter(Mandatory=$false)]
    [switch]$UseGUI
)

    if ($KeyPath -eq "") {$KeyPath=$Path}
    
    if ($UseGUI) {
        $creds = Get-Credential
    }
    else {
        $userName = Read-Host -Prompt "Username"
        $Password = Read-Host -Prompt "Password" -AsSecureString
        $creds = New-Object System.Management.Automation.PSCredential $userName,$Password
    }

    $key = New-AESKey -Length $KeyLength -Path "$KeyPath\$KeyFile"
    $secUser = $creds.UserName | ConvertTo-SecureString -AsPlainText -Force | ConvertFrom-SecureString -key $key
    $secPass = $creds.Password | ConvertFrom-SecureString -Key $key

    Add-Content -Path "$Path\$CredentialsFile" -Value $secUser
    Add-Content -Path "$Path\$CredentialsFile" -Value $secPass
}


function Get-SharedCredentials {
<#
    .Synopsis
    Decodes the files encrypted by New-SharedCredentials.
    
    .Description
    Reads the credentials.dat and key.bin files, then decodes the credentials and returns a PSCredential object representing
    the login and password generated by New-SharedCredentials.  The default behavior is to look for all of the files in the same location.

    .Parameter Path
    Location of the encrypted credential and AES key files.

    .Parameter KeyPath
    Specifies a distinct location to look in for the key.bin file.
    
    .Parameter CredentialsFile
    Specifies the name of the file that contains the encrypted credentials.  Defaults to credentials.dat.

    .Parameter KeyFile
    Specifies the name of the AES key file.  Defaults to key.bin.

    .Inputs
    Locations of the credential and AES key files.

    .Outputs
    A System.Management.Automation.PSCredential object representing the encrypted credentials.

    .Example

    $credentials = Get-SharedCredentials "\\server01\Credentials\Script01"

    Decodes the encrypted credentials stored in \\server01\Credentials\Script01 using the key.bin file stored in the same folder.

    .Example

    $credentials = Get-ShareCredentials -Path "\\server01\Credentials\Script01" -KeyPath "\\server01\Keys\Script01"

    Decode the encrypted credentials stored in \\server01\Credentials\Script01 with the key.bin file stored in \\server01\Keys\Script01 folder.
#>
[CmdletBinding()]

Param(
    [parameter(Mandatory=$true,Position=1)]
    [string]$Path,
    [parameter(Mandatory=$false)]
    [string]$KeyPath,
    [parameter(Mandatory=$false)]
    [string]$CredentialsFile = "credentials.dat",
    [parameter(Mandatory=$false)]
    [string]$KeyFile = "key.bin"
)

    if ($KeyPath -eq "") {$KeyPath = $Path}

    $key = [System.IO.File]::ReadAllBytes("$KeyPath\$KeyFile")
    $credFile = Get-Content "$Path\$CredentialsFile"
    $secUser = $credFile[0]
    $secPass = $credFile[1]

    $username = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR( (ConvertTo-SecureString $secUser -Key $key)))

    $newCreds = New-Object System.Management.Automation.PSCredential $username, $($secPass | ConvertTo-SecureString -Key $key)

    return $newCreds

}

Export-ModuleMember -Function New-SharedCredentials, Get-SharedCredentials, New-AESKey